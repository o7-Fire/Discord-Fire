buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.github.o7-Fire.Atomic-Library:Atomic:$atomHash"
    }

}

plugins {
    id 'java'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}
ext {
    try {
        File f = new File(rootDir, "../Atom"), gradle = new File(rootDir, "gradle.properties")
        if (f.exists() && gradle.exists()) {
            String s = new String(Runtime.getRuntime().exec("git rev-parse HEAD", new String[0], f).getInputStream().readAllBytes()).trim()
            HashMap<String, String> map = Encoder.parseProperty(gradle.toURI().toURL().openStream())
            map.put("atomHash", s)
            Files.writeString(gradle.toPath(), Encoder.property(map))
            atomHash = s
        }
    } catch (ignored) {
    }
}
dependencies {
    implementation("com.discord4j:discord4j-core:3.1.3")
    implementation "com.github.o7-Fire.Atomic-Library:Atomic:$atomHash"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}
jar {
    manifest {
        attributes "Main-Class": "Main"
    }

    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}